diff --git a/telephony/java/android/telephony/SignalStrength.java b/telephony/java/android/telephony/SignalStrength.java
index 997b6ff..974c422 100644
--- a/telephony/java/android/telephony/SignalStrength.java
+++ b/telephony/java/android/telephony/SignalStrength.java
@@ -50,7 +50,43 @@ public class SignalStrength implements Parcelable {
 
     /** @hide */
     //Use int max, as -1 is a valid value in signal strength
-    public static final int INVALID = 0x7FFFFFFF;
+    public static final int INVALID = Integer.MAX_VALUE;
+
+    private static final int GSM_STRENGTH_POOR_STD = -109;
+    private static final int GSM_STRENGTH_MODERATE_STD = -103;
+    private static final int GSM_STRENGTH_GOOD_STD = -97;
+    private static final int GSM_STRENGTH_GREAT_STD = -89;
+    private static final int GSM_STRENGTH_NONE = 0;
+    private static final int GSM_STRENGTH_UNKOUWN = 99;
+
+    private static final int WCDMA_STRENGTH_POOR_STD = -112;
+    private static final int WCDMA_STRENGTH_MODERATE_STD = -105;
+    private static final int WCDMA_STRENGTH_GOOD_STD = -98;
+    private static final int WCDMA_STRENGTH_GREAT_STD = -91;
+    private static final int WCDMA_STRENGTH_NONE = 0;
+    private static final int WCDMA_STRENGTH_INVALID = INVALID;
+
+    private static final int CDMA_STRENGTH_GOOD_STD = -95;
+    private static final int CDMA_STRENGTH_GREAT_STD = -85;
+    private static final int CDMA_STRENGTH_MODERATE_STD = -102;
+    private static final int CDMA_STRENGTH_POOR_STD = -108;
+
+    private static final int CDMA_ECIO_STRENGTH_GOOD_STD = -11;
+    private static final int CDMA_ECIO_STRENGTH_GREAT_STD = -9;
+    private static final int CDMA_ECIO_STRENGTH_MODERATE_STD = -13;
+    private static final int CDMA_ECIO_STRENGTH_POOR_STD = -15;
+
+    private static final int CDMA_SNR_STRENGTH_GOOD_STD = 5;
+    private static final int CDMA_SNR_STRENGTH_GREAT_STD = 7;
+    private static final int CDMA_SNR_STRENGTH_MODERATE_STD = 3;
+    private static final int CDMA_SNR_STRENGTH_POOR_STD = 1;
+
+    private static final int LTE_STRENGTH_POOR_STD = -115;
+    private static final int LTE_STRENGTH_MODERATE_STD = -105;
+    private static final int LTE_STRENGTH_GOOD_STD = -95;
+    private static final int LTE_STRENGTH_GREAT_STD = -85;
+    private static final int LTE_STRENGTH_NONE_STD = -140;
+    private static final int LTE_STRENGTH_UNKOUWN_STD = -44;
 
     private static final int RSRP_THRESH_TYPE_STRICT = 0;
     private static final int RSRP_THRESH_TYPE_CUSTOM = 2;
@@ -71,6 +107,8 @@ public class SignalStrength implements Parcelable {
     private int mLteRssnr;
     private int mLteCqi;
     private int mTdScdmaRscp;
+    private int mWcdmaEcio;
+    private int mWcdmaRscp;
 
     private boolean isGsm; // This value is set by the ServiceStateTracker onSignalStrengthResult
 
@@ -100,6 +138,8 @@ public class SignalStrength implements Parcelable {
     public SignalStrength() {
         mGsmSignalStrength = 99;
         mGsmBitErrorRate = -1;
+        mWcdmaRscp = -1;
+        mWcdmaEcio = -1;
         mCdmaDbm = -1;
         mCdmaEcio = -1;
         mEvdoDbm = -1;
@@ -125,6 +165,8 @@ public class SignalStrength implements Parcelable {
     public SignalStrength(boolean gsmFlag) {
         mGsmSignalStrength = 99;
         mGsmBitErrorRate = -1;
+        mWcdmaRscp = -1;
+        mWcdmaEcio = -1;
         mCdmaDbm = -1;
         mCdmaEcio = -1;
         mEvdoDbm = -1;
@@ -145,11 +187,11 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public SignalStrength(int gsmSignalStrength, int gsmBitErrorRate,
-            int cdmaDbm, int cdmaEcio,
+            int WcdmaRscp, int WcdmaEcio, int cdmaDbm, int cdmaEcio,
             int evdoDbm, int evdoEcio, int evdoSnr,
             int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi,
             boolean gsmFlag) {
-        initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio,
+        initialize(gsmSignalStrength, gsmBitErrorRate, WcdmaRscp, WcdmaEcio, cdmaDbm, cdmaEcio,
                 evdoDbm, evdoEcio, evdoSnr, lteSignalStrength, lteRsrp,
                 lteRsrq, lteRssnr, lteCqi, gsmFlag);
     }
@@ -160,11 +202,11 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public SignalStrength(int gsmSignalStrength, int gsmBitErrorRate,
-            int cdmaDbm, int cdmaEcio,
+            int WcdmaRscp, int WcdmaEcio, int cdmaDbm, int cdmaEcio,
             int evdoDbm, int evdoEcio, int evdoSnr,
             int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi,
             int tdScdmaRscp, boolean gsmFlag) {
-        initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio,
+        initialize(gsmSignalStrength, gsmBitErrorRate, WcdmaRscp, WcdmaEcio, cdmaDbm, cdmaEcio,
                 evdoDbm, evdoEcio, evdoSnr, lteSignalStrength, lteRsrp,
                 lteRsrq, lteRssnr, lteCqi, gsmFlag);
         mTdScdmaRscp = tdScdmaRscp;
@@ -176,10 +218,10 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public SignalStrength(int gsmSignalStrength, int gsmBitErrorRate,
-            int cdmaDbm, int cdmaEcio,
+            int WcdmaRscp, int WcdmaEcio, int cdmaDbm, int cdmaEcio,
             int evdoDbm, int evdoEcio, int evdoSnr,
             boolean gsmFlag) {
-        initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio,
+        initialize(gsmSignalStrength, gsmBitErrorRate, WcdmaRscp, WcdmaEcio, cdmaDbm, cdmaEcio,
                 evdoDbm, evdoEcio, evdoSnr, 99, INVALID,
                 INVALID, INVALID, INVALID, gsmFlag);
     }
@@ -210,11 +252,11 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public void initialize(int gsmSignalStrength, int gsmBitErrorRate,
-            int cdmaDbm, int cdmaEcio,
+            int WcdmaRscp, int WcdmaEcio, int cdmaDbm, int cdmaEcio,
             int evdoDbm, int evdoEcio, int evdoSnr,
             boolean gsm) {
-        initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio,
-                evdoDbm, evdoEcio, evdoSnr, 99, INVALID,
+        initialize(gsmSignalStrength, gsmBitErrorRate, WcdmaRscp, WcdmaEcio,
+                cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, INVALID,
                 INVALID, INVALID, INVALID, gsm);
     }
 
@@ -238,12 +280,14 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public void initialize(int gsmSignalStrength, int gsmBitErrorRate,
-            int cdmaDbm, int cdmaEcio,
+            int WcdmaRscp, int WcdmaEcio, int cdmaDbm, int cdmaEcio,
             int evdoDbm, int evdoEcio, int evdoSnr,
             int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi,
             boolean gsm) {
         mGsmSignalStrength = gsmSignalStrength;
         mGsmBitErrorRate = gsmBitErrorRate;
+        mWcdmaRscp = WcdmaRscp;
+        mWcdmaEcio = WcdmaEcio;
         mCdmaDbm = cdmaDbm;
         mCdmaEcio = cdmaEcio;
         mEvdoDbm = evdoDbm;
@@ -265,6 +309,8 @@ public class SignalStrength implements Parcelable {
     protected void copyFrom(SignalStrength s) {
         mGsmSignalStrength = s.mGsmSignalStrength;
         mGsmBitErrorRate = s.mGsmBitErrorRate;
+        mWcdmaRscp = s.mWcdmaRscp;
+        mWcdmaEcio = s.mWcdmaEcio;
         mCdmaDbm = s.mCdmaDbm;
         mCdmaEcio = s.mCdmaEcio;
         mEvdoDbm = s.mEvdoDbm;
@@ -289,6 +335,8 @@ public class SignalStrength implements Parcelable {
 
         mGsmSignalStrength = in.readInt();
         mGsmBitErrorRate = in.readInt();
+        mWcdmaRscp = in.readInt();
+        mWcdmaEcio = in.readInt();
         mCdmaDbm = in.readInt();
         mCdmaEcio = in.readInt();
         mEvdoDbm = in.readInt();
@@ -316,6 +364,8 @@ public class SignalStrength implements Parcelable {
         SignalStrength ss = new SignalStrength();
         ss.mGsmSignalStrength = in.readInt();
         ss.mGsmBitErrorRate = in.readInt();
+        ss.mWcdmaRscp = in.readInt();
+        ss.mWcdmaEcio = in.readInt();
         ss.mCdmaDbm = in.readInt();
         ss.mCdmaEcio = in.readInt();
         ss.mEvdoDbm = in.readInt();
@@ -336,6 +386,8 @@ public class SignalStrength implements Parcelable {
     public void writeToParcel(Parcel out, int flags) {
         out.writeInt(mGsmSignalStrength);
         out.writeInt(mGsmBitErrorRate);
+        out.writeInt(mWcdmaRscp);
+        out.writeInt(mWcdmaEcio);
         out.writeInt(mCdmaDbm);
         out.writeInt(mCdmaEcio);
         out.writeInt(mEvdoDbm);
@@ -385,28 +437,6 @@ public class SignalStrength implements Parcelable {
      */
     public void validateInput() {
         if (DBG) log("Signal before validate=" + this);
-        // TS 27.007 8.5
-        mGsmSignalStrength = mGsmSignalStrength >= 0 ? mGsmSignalStrength : 99;
-        // BER no change;
-
-        mCdmaDbm = mCdmaDbm > 0 ? -mCdmaDbm : -120;
-        mCdmaEcio = (mCdmaEcio > 0) ? -mCdmaEcio : -160;
-
-        mEvdoDbm = (mEvdoDbm > 0) ? -mEvdoDbm : -120;
-        mEvdoEcio = (mEvdoEcio >= 0) ? -mEvdoEcio : -1;
-        mEvdoSnr = ((mEvdoSnr > 0) && (mEvdoSnr <= 8)) ? mEvdoSnr : -1;
-
-        // TS 36.214 Physical Layer Section 5.1.3, TS 36.331 RRC
-        mLteSignalStrength = (mLteSignalStrength >= 0) ? mLteSignalStrength : 99;
-        mLteRsrp = ((mLteRsrp >= 44) && (mLteRsrp <= 140)) ? -mLteRsrp : SignalStrength.INVALID;
-        mLteRsrq = ((mLteRsrq >= 3) && (mLteRsrq <= 20)) ? -mLteRsrq : SignalStrength.INVALID;
-        mLteRssnr = ((mLteRssnr >= -200) && (mLteRssnr <= 300) && !(mLteRsrq == SignalStrength.INVALID && mLteRssnr == -1)) ? mLteRssnr
-                : SignalStrength.INVALID;
-
-        mTdScdmaRscp = ((mTdScdmaRscp >= 25) && (mTdScdmaRscp <= 120))
-                ? -mTdScdmaRscp : SignalStrength.INVALID;
-
-        // Cqi no change
         if (DBG) log("Signal after validate=" + this);
     }
 
@@ -587,17 +617,12 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public int getDbm() {
-        int dBm = INVALID;
+        int dBm;
 
         if(isGsm()) {
-            boolean oldRil = needsOldRilFeature("signalstrength");
             dBm = getLteDbm();
-            if (dBm == INVALID || oldRil) {
-                if (getTdScdmaLevel() == SIGNAL_STRENGTH_NONE_OR_UNKNOWN) {
-                    dBm = getGsmDbm();
-                } else {
-                    dBm = getTdScdmaDbm();
-                }
+            if (dBm == INVALID || dBm == 0) {
+                dBm = getGsmDbm();
             }
         } else {
             int cdmaDbm = getCdmaDbm();
@@ -616,15 +641,15 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public int getGsmDbm() {
-        int dBm;
+        int dBm = -1;
 
-        int gsmSignalStrength = getGsmSignalStrength();
-        int asu = (gsmSignalStrength == 99 ? -1 : gsmSignalStrength);
-        if (asu != -1) {
-            dBm = -113 + (2 * asu);
-        } else {
-            dBm = -1;
+        if (mWcdmaRscp == -1 || mWcdmaRscp == WCDMA_STRENGTH_NONE) {
+            if (mGsmSignalStrength != GSM_STRENGTH_UNKOUWN)
+                dBm = mGsmSignalStrength;
         }
+        else
+            dBm = mWcdmaRscp;
+
         if (DBG) log("getGsmDbm=" + dBm);
         return dBm;
     }
@@ -637,16 +662,35 @@ public class SignalStrength implements Parcelable {
     public int getGsmLevel() {
         int level;
 
-        // ASU ranges from 0 to 31 - TS 27.007 Sec 8.5
-        // asu = 0 (-113dB or less) is very weak
-        // signal, its better to show 0 bars to the user in such cases.
-        // asu = 99 is a special case, where the signal strength is unknown.
-        int asu = getGsmSignalStrength();
-        if (asu <= 2 || asu == 99) level = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-        else if (asu >= 12) level = SIGNAL_STRENGTH_GREAT;
-        else if (asu >= 8)  level = SIGNAL_STRENGTH_GOOD;
-        else if (asu >= 5)  level = SIGNAL_STRENGTH_MODERATE;
-        else level = SIGNAL_STRENGTH_POOR;
+        if (mWcdmaRscp == -1 || mWcdmaRscp == WCDMA_STRENGTH_NONE) {
+            if (mGsmSignalStrength == GSM_STRENGTH_NONE ||
+                mGsmSignalStrength == GSM_STRENGTH_UNKOUWN)
+                level = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+            else if (mGsmSignalStrength >= GSM_STRENGTH_GREAT_STD)
+                level = SIGNAL_STRENGTH_GREAT;
+            else if (mGsmSignalStrength >= GSM_STRENGTH_GOOD_STD)
+                level = SIGNAL_STRENGTH_GOOD;
+            else if (mGsmSignalStrength >= GSM_STRENGTH_MODERATE_STD)
+                level = SIGNAL_STRENGTH_MODERATE;
+            else if (mGsmSignalStrength >= GSM_STRENGTH_POOR_STD)
+                level = SIGNAL_STRENGTH_POOR;
+            else
+                level = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        }
+        else {
+            if (mWcdmaRscp == WCDMA_STRENGTH_NONE || mWcdmaRscp == INVALID)
+                level = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+            else if (mWcdmaRscp >= WCDMA_STRENGTH_GREAT_STD)
+                level = SIGNAL_STRENGTH_GREAT;
+            else if (mWcdmaRscp >= WCDMA_STRENGTH_GOOD_STD)
+                level = SIGNAL_STRENGTH_GOOD;
+            else if (mWcdmaRscp >= WCDMA_STRENGTH_MODERATE_STD)
+                level = SIGNAL_STRENGTH_MODERATE;
+            else if (mWcdmaRscp >= WCDMA_STRENGTH_POOR_STD)
+                level = SIGNAL_STRENGTH_POOR;
+            else
+                level = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        }
         if (DBG) log("getGsmLevel=" + level);
         return level;
     }
@@ -657,11 +701,18 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public int getGsmAsuLevel() {
-        // ASU ranges from 0 to 31 - TS 27.007 Sec 8.5
-        // asu = 0 (-113dB or less) is very weak
-        // signal, its better to show 0 bars to the user in such cases.
-        // asu = 99 is a special case, where the signal strength is unknown.
-        int level = getGsmSignalStrength();
+        int level = getGsmDbm();
+
+        if (level != -1 && level != 0 && level != INVALID) {
+            level = (level + 113) / 2;
+            if (level < 0)
+                level = 0;
+            else if (level > 31)
+                level = 31;
+        }
+        else
+            level = -1;
+
         if (DBG) log("getGsmAsuLevel=" + level);
         return level;
     }
@@ -677,20 +728,36 @@ public class SignalStrength implements Parcelable {
         int levelDbm;
         int levelEcio;
 
-        if (cdmaDbm >= -75) levelDbm = SIGNAL_STRENGTH_GREAT;
-        else if (cdmaDbm >= -85) levelDbm = SIGNAL_STRENGTH_GOOD;
-        else if (cdmaDbm >= -95) levelDbm = SIGNAL_STRENGTH_MODERATE;
-        else if (cdmaDbm >= -100) levelDbm = SIGNAL_STRENGTH_POOR;
-        else levelDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        if (cdmaDbm == -1)
+            levelDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        else if (cdmaDbm >= CDMA_STRENGTH_GREAT_STD)
+            levelDbm = SIGNAL_STRENGTH_GREAT;
+        else if (cdmaDbm >= CDMA_STRENGTH_GOOD_STD)
+            levelDbm = SIGNAL_STRENGTH_GOOD;
+        else if (cdmaDbm >= CDMA_STRENGTH_MODERATE_STD)
+            levelDbm = SIGNAL_STRENGTH_MODERATE;
+        else if (cdmaDbm >= CDMA_STRENGTH_POOR_STD)
+            levelDbm = SIGNAL_STRENGTH_POOR;
+        else
+            levelDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+
+        if (cdmaEcio >= CDMA_ECIO_STRENGTH_GREAT_STD)
+            levelEcio = SIGNAL_STRENGTH_GREAT;
+        else if (cdmaEcio >= CDMA_ECIO_STRENGTH_GOOD_STD)
+            levelEcio = SIGNAL_STRENGTH_GOOD;
+        else if (cdmaEcio >= CDMA_ECIO_STRENGTH_MODERATE_STD)
+            levelEcio = SIGNAL_STRENGTH_MODERATE;
+        else if (cdmaEcio >= CDMA_ECIO_STRENGTH_POOR_STD)
+            levelEcio = SIGNAL_STRENGTH_POOR;
+        else
+            levelEcio = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
 
-        // Ec/Io are in dB*10
-        if (cdmaEcio >= -90) levelEcio = SIGNAL_STRENGTH_GREAT;
-        else if (cdmaEcio >= -110) levelEcio = SIGNAL_STRENGTH_GOOD;
-        else if (cdmaEcio >= -130) levelEcio = SIGNAL_STRENGTH_MODERATE;
-        else if (cdmaEcio >= -150) levelEcio = SIGNAL_STRENGTH_POOR;
-        else levelEcio = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        int level;
+        if (levelDbm < levelEcio)
+            level = levelDbm;
+        else
+            level = levelEcio;
 
-        int level = (levelDbm < levelEcio) ? levelDbm : levelEcio;
         if (DBG) log("getCdmaLevel=" + level);
         return level;
     }
@@ -737,19 +804,36 @@ public class SignalStrength implements Parcelable {
         int levelEvdoDbm;
         int levelEvdoSnr;
 
-        if (evdoDbm >= -65) levelEvdoDbm = SIGNAL_STRENGTH_GREAT;
-        else if (evdoDbm >= -75) levelEvdoDbm = SIGNAL_STRENGTH_GOOD;
-        else if (evdoDbm >= -90) levelEvdoDbm = SIGNAL_STRENGTH_MODERATE;
-        else if (evdoDbm >= -105) levelEvdoDbm = SIGNAL_STRENGTH_POOR;
-        else levelEvdoDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        if (evdoDbm == -1)
+            levelEvdoDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        else if (evdoDbm >= CDMA_STRENGTH_GREAT_STD)
+            levelEvdoDbm = SIGNAL_STRENGTH_GREAT;
+        else if (evdoDbm >= CDMA_STRENGTH_GOOD_STD)
+            levelEvdoDbm = SIGNAL_STRENGTH_GOOD;
+        else if (evdoDbm >= CDMA_STRENGTH_MODERATE_STD)
+            levelEvdoDbm = SIGNAL_STRENGTH_MODERATE;
+        else if (evdoDbm >= CDMA_STRENGTH_POOR_STD)
+            levelEvdoDbm = SIGNAL_STRENGTH_POOR;
+        else
+            levelEvdoDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+
+        if (evdoSnr >= CDMA_SNR_STRENGTH_GREAT_STD)
+            levelEvdoSnr = SIGNAL_STRENGTH_GREAT;
+        else if (evdoSnr >= CDMA_SNR_STRENGTH_GOOD_STD)
+            levelEvdoSnr = SIGNAL_STRENGTH_GOOD;
+        else if (evdoSnr >= CDMA_SNR_STRENGTH_MODERATE_STD)
+            levelEvdoSnr = SIGNAL_STRENGTH_MODERATE;
+        else if (evdoSnr >= CDMA_SNR_STRENGTH_POOR_STD)
+            levelEvdoSnr = SIGNAL_STRENGTH_POOR;
+        else
+            levelEvdoSnr = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
 
-        if (evdoSnr >= 7) levelEvdoSnr = SIGNAL_STRENGTH_GREAT;
-        else if (evdoSnr >= 5) levelEvdoSnr = SIGNAL_STRENGTH_GOOD;
-        else if (evdoSnr >= 3) levelEvdoSnr = SIGNAL_STRENGTH_MODERATE;
-        else if (evdoSnr >= 1) levelEvdoSnr = SIGNAL_STRENGTH_POOR;
-        else levelEvdoSnr = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        int level;
+        if (levelEvdoDbm < levelEvdoSnr)
+            level = levelEvdoDbm;
+        else
+            level = levelEvdoSnr;
 
-        int level = (levelEvdoDbm < levelEvdoSnr) ? levelEvdoDbm : levelEvdoSnr;
         if (DBG) log("getEvdoLevel=" + level);
         return level;
     }
@@ -790,6 +874,7 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public int getLteDbm() {
+        if (DBG) log("getLteDbm=" + mLteRsrp);
         return mLteRsrp;
     }
 
@@ -799,74 +884,42 @@ public class SignalStrength implements Parcelable {
      * @hide
      */
     public int getLteLevel() {
-        /*
-         * TS 36.214 Physical Layer Section 5.1.3 TS 36.331 RRC RSSI = received
-         * signal + noise RSRP = reference signal dBm RSRQ = quality of signal
-         * dB= Number of Resource blocksxRSRP/RSSI SNR = gain=signal/noise ratio
-         * = -10log P1/P2 dB
-         */
-        int rssiIconLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN, rsrpIconLevel = -1, snrIconLevel = -1;
-
-        int rsrpThreshType = Resources.getSystem().getInteger(com.android.internal.R.integer.
-                config_LTE_RSRP_threshold_type);
-        int[] threshRsrp;
-        if (rsrpThreshType == RSRP_THRESH_TYPE_STRICT) {
-            threshRsrp = RSRP_THRESH_STRICT;
-        } else if (rsrpThreshType == RSRP_THRESH_TYPE_CUSTOM) {
-            threshRsrp = Resources.getSystem().getIntArray(com.android.internal.R.array.
-                    config_LTE_RSRP_custom_levels);
-        } else {
-            threshRsrp = RSRP_THRESH_LENIENT;
-        }
-
-        if (mLteRsrp > threshRsrp[5]) rsrpIconLevel = -1;
-        else if (mLteRsrp >= threshRsrp[4]) rsrpIconLevel = SIGNAL_STRENGTH_GREAT;
-        else if (mLteRsrp >= threshRsrp[3]) rsrpIconLevel = SIGNAL_STRENGTH_GOOD;
-        else if (mLteRsrp >= threshRsrp[2]) rsrpIconLevel = SIGNAL_STRENGTH_MODERATE;
-        else if (mLteRsrp >= threshRsrp[1]) rsrpIconLevel = SIGNAL_STRENGTH_POOR;
-        else if (mLteRsrp >= threshRsrp[0]) rsrpIconLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-
-        /*
-         * Values are -200 dB to +300 (SNR*10dB) RS_SNR >= 13.0 dB =>4 bars 4.5
-         * dB <= RS_SNR < 13.0 dB => 3 bars 1.0 dB <= RS_SNR < 4.5 dB => 2 bars
-         * -3.0 dB <= RS_SNR < 1.0 dB 1 bar RS_SNR < -3.0 dB/No Service Antenna
-         * Icon Only
-         */
-        if (mLteRssnr > 300) snrIconLevel = -1;
-        else if (mLteRssnr >= 130) snrIconLevel = SIGNAL_STRENGTH_GREAT;
-        else if (mLteRssnr >= 45) snrIconLevel = SIGNAL_STRENGTH_GOOD;
-        else if (mLteRssnr >= 10) snrIconLevel = SIGNAL_STRENGTH_MODERATE;
-        else if (mLteRssnr >= -30) snrIconLevel = SIGNAL_STRENGTH_POOR;
-        else if (mLteRssnr >= -200)
-            snrIconLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-
-        if (DBG) log("getLTELevel - rsrp:" + mLteRsrp + " snr:" + mLteRssnr + " rsrpIconLevel:"
-                + rsrpIconLevel + " snrIconLevel:" + snrIconLevel);
-
-        /* Choose a measurement type to use for notification */
-        if (snrIconLevel != -1 && rsrpIconLevel != -1) {
-            /*
-             * The number of bars displayed shall be the smaller of the bars
-             * associated with LTE RSRP and the bars associated with the LTE
-             * RS_SNR
-             */
-            return (rsrpIconLevel < snrIconLevel ? rsrpIconLevel : snrIconLevel);
-        }
-
-        if (snrIconLevel != -1) return snrIconLevel;
-
-        if (rsrpIconLevel != -1) return rsrpIconLevel;
+        int lteDbm = getLteDbm();
+        int lteSnr = getLteRssnr();
+        int levelLteDbm;
+        int levelLteSnr;
+        int level;
 
-        /* Valid values are (0-63, 99) as defined in TS 36.331 */
-        if (mLteSignalStrength > 63) rssiIconLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
-        else if (mLteSignalStrength >= 12) rssiIconLevel = SIGNAL_STRENGTH_GREAT;
-        else if (mLteSignalStrength >= 8) rssiIconLevel = SIGNAL_STRENGTH_GOOD;
-        else if (mLteSignalStrength >= 5) rssiIconLevel = SIGNAL_STRENGTH_MODERATE;
-        else if (mLteSignalStrength >= 0) rssiIconLevel = SIGNAL_STRENGTH_POOR;
+        if (lteDbm == -1)
+            levelLteDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+        else if (lteDbm >= CDMA_STRENGTH_GREAT_STD)
+            levelLteDbm = SIGNAL_STRENGTH_GOOD;
+        else if (lteDbm >= CDMA_STRENGTH_GOOD_STD)
+            levelLteDbm = SIGNAL_STRENGTH_GOOD;
+        else if (lteDbm >= CDMA_STRENGTH_MODERATE_STD)
+            levelLteDbm = SIGNAL_STRENGTH_MODERATE;
+        else if (lteDbm >= CDMA_STRENGTH_POOR_STD)
+            levelLteDbm = SIGNAL_STRENGTH_POOR;
+        else
+            levelLteDbm = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+
+        if (lteSnr >= CDMA_SNR_STRENGTH_GREAT_STD)
+            levelLteSnr = SIGNAL_STRENGTH_GOOD;
+        else if (lteSnr >= CDMA_SNR_STRENGTH_GOOD_STD)
+            levelLteSnr = SIGNAL_STRENGTH_GOOD;
+        else if (lteSnr >= CDMA_SNR_STRENGTH_MODERATE_STD)
+            levelLteSnr = SIGNAL_STRENGTH_MODERATE;
+        else if (lteSnr >= CDMA_SNR_STRENGTH_POOR_STD)
+            levelLteSnr = SIGNAL_STRENGTH_POOR;
+        else
+            levelLteSnr = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
+
+        if (levelLteDbm < levelLteSnr)
+            level = levelLteDbm;
+        else
+            level = levelLteSnr;
 
-        if (DBG) log("getLTELevel - rssi:" + mLteSignalStrength + " rssiIconLevel:"
-                + rssiIconLevel);
-        return rssiIconLevel;
+        return level;
 
     }
     /**
@@ -960,6 +1013,7 @@ public class SignalStrength implements Parcelable {
         int primeNum = 31;
         return ((mGsmSignalStrength * primeNum)
                 + (mGsmBitErrorRate * primeNum)
+                + (mWcdmaRscp * primeNum) + (mWcdmaEcio * primeNum)
                 + (mCdmaDbm * primeNum) + (mCdmaEcio * primeNum)
                 + (mEvdoDbm * primeNum) + (mEvdoEcio * primeNum) + (mEvdoSnr * primeNum)
                 + (mLteSignalStrength * primeNum) + (mLteRsrp * primeNum)
@@ -986,6 +1040,8 @@ public class SignalStrength implements Parcelable {
 
         return (mGsmSignalStrength == s.mGsmSignalStrength
                 && mGsmBitErrorRate == s.mGsmBitErrorRate
+                && mWcdmaRscp == s.mWcdmaRscp
+                && mWcdmaEcio == s.mWcdmaEcio
                 && mCdmaDbm == s.mCdmaDbm
                 && mCdmaEcio == s.mCdmaEcio
                 && mEvdoDbm == s.mEvdoDbm
@@ -1008,6 +1064,8 @@ public class SignalStrength implements Parcelable {
         return ("SignalStrength:"
                 + " " + mGsmSignalStrength
                 + " " + mGsmBitErrorRate
+                + " " + mWcdmaRscp
+                + " " + mWcdmaEcio
                 + " " + mCdmaDbm
                 + " " + mCdmaEcio
                 + " " + mEvdoDbm
@@ -1031,6 +1089,8 @@ public class SignalStrength implements Parcelable {
     private void setFromNotifierBundle(Bundle m) {
         mGsmSignalStrength = m.getInt("GsmSignalStrength");
         mGsmBitErrorRate = m.getInt("GsmBitErrorRate");
+        mWcdmaRscp = m.getInt("WcdmaRscp");
+        mWcdmaEcio = m.getInt("WcdmaEcio");
         mCdmaDbm = m.getInt("CdmaDbm");
         mCdmaEcio = m.getInt("CdmaEcio");
         mEvdoDbm = m.getInt("EvdoDbm");
@@ -1054,6 +1114,8 @@ public class SignalStrength implements Parcelable {
     public void fillInNotifierBundle(Bundle m) {
         m.putInt("GsmSignalStrength", mGsmSignalStrength);
         m.putInt("GsmBitErrorRate", mGsmBitErrorRate);
+        m.putInt("WcdmaRscp", mWcdmaRscp);
+        m.putInt("WcdmaEcio", mWcdmaEcio);
         m.putInt("CdmaDbm", mCdmaDbm);
         m.putInt("CdmaEcio", mCdmaEcio);
         m.putInt("EvdoDbm", mEvdoDbm);
